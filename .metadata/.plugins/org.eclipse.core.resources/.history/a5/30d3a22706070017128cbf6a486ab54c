import java.util.*;
import java.io.*;

public class Operations{
	enum Menu {
		ADD, NUMBER, RANK, SEARCH, QUIT
	}
	

	private ArrayList<StudentInfo> student = new ArrayList<StudentInfo>();
	private Scanner sc = new Scanner(System.in);
	
	// 파일 저장
	public void saveFile() {
		FileWriter fw = null;
		
		try {
			fw = new FileWriter("Resource/StudentInfo.txt");
			
			for(StudentInfo std: student) {
				
				//System.out.printf("번호\t이름\t국어\t영어\t수학\t총점\t평균\t순위%n");
				String data = std.getNo() + ","
							+ std.getName() + ","
							+ std.getKorScore() + ","
							+ std.getEngScore() + ","
							+ std.getMathScore() + ","
							+ std.getTotal() + ","
							+ std.getAverage() + ","
							+ std.getRank() + "\r\n";
				
				fw.write(data);
			}
			
			System.out.println("저장완료");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(fw != null) fw.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	// 파일 불러오기
	public void LoadFile() {
		BufferedReader br = null;
		
		try {
			br = new BufferedReader(new FileReader("Resource/StudentInfo.txt"));
			
			while (br.readLine() != null) {
				String data = br.readLine();
			}
			
			
			System.out.println("불러오기완료");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(br != null) br.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	// 메뉴선택
	public void start() {
		while(true) {	// 5를 입력받기 전까지 계속 실행됨
			System.out.println("1. 학생 성적 등록");
			System.out.println("2. 번호별 전체 학생 성적 조회");
	        System.out.println("3. 순위별 전체 학생 성적 조회");
	        System.out.println("4. 개인별 학생 성적 조회");
	        System.out.println("  - 이름");
	        System.out.println("  - 번호");
	        System.out.println("5. 종료");
	        System.out.print("메뉴를 선택하세요 : ");
			
			Menu[] menus = Menu.values();
			int i = inputNum(1,5) - 1;
			if(i < 0) continue; // 빈 공백 입력 받은 경우
			Menu menu = menus[i];
			
			System.out.println();

			switch(menu) {
				case ADD:
					// 1. 등록
					AddStudent();
					break;
				case NUMBER:
					// 2. 번호별 조회
					noSortedView();
					break;
				case RANK:
					// 3. 순위별 조회
					rankSortedView();
					break;
				case SEARCH:
					// 4. 개인별 성적(이름 or 번호로 조회)
					personalGradeCheck();
					break;
				case QUIT:
					// 5. 종료
					System.out.println("프로그램을 종료합니다.");
					return ;
				default:
					break;
         } // switch
		 System.out.println();
      } // while
	}

	// 숫자를 입력받는 메소드
	public int inputNum(int minScope, int maxScope) {

		int num = 0;
		while(true) {
			try {
				String input = sc.nextLine();
				if(input.equals("")) {
					return -1;
				} else if(input.charAt(0) >= '0' && input.charAt(0) <='9') {
					num = Integer.parseInt(input);
					if(num < minScope || num > maxScope) { 
						throw new WrongValueException("\n" + minScope + " ~ " + maxScope +"의 숫자를 입력하세요.");

					}
					break;
				} else { // 공백, 숫자 범위 아웃
					throw new WrongValueException("\n" + minScope + " ~ " + maxScope +"의 숫자를 입력하세요.\n");	
				}
	
			}
			catch (WrongValueException wve) {
				System.out.println(wve.getMessage());
				System.out.print("다시 입력 : ");

			} //try

		} //while	
		return num;
	} // inputNum()


	// 문자를 입력받는 메소드
	public String inputStr() {
		String str = "";
		while(true) {
			try {
				str = sc.nextLine();	
				if(str.equals("")) {	// 아무입력없이 엔터쳤을때
					throw new WrongValueException("이름을 입력하세요: ");
				} else {
					break;	// 뭐라도 입력했으니 반환.
				}
			}
			catch (WrongValueException wve) {
				System.out.print(wve.getMessage());
			}	
			
		} // while	
		return str; 
	}


	// 모든 학생의 순위를 설정하는 메소드
	public void determineRanking() {
		int rank;
		for(int i = 0; i < student.size(); i++) {
			rank = 1;
			for(int j = 0; j < student.size(); j++) {
				if(student.get(i).getTotal() < student.get(j).getTotal()) {
					rank++;
				}
			}
			student.get(i).setRank(rank);
		}
	}	// determineRanking()

	
	public void sortArray(ArrayList<StudentInfo> temp) {
								// Comparator 정의
		Collections.sort(temp, new Comparator<StudentInfo>(){
		  public int compare(StudentInfo obj1, StudentInfo obj2) {
			return new Integer(obj1.getRank()).compareTo(new Integer(obj2.getRank()));
		  }
		});
	}

	// 학생을 추가하는 메소드 (1)
	public void AddStudent() {
		// 학생 정보 입력
		System.out.print("이름 : ");
		String name = inputStr();
		int korScore;
		int engScore;
		int mathScore;
		do
		{
			System.out.print("국어 점수 : ");
			korScore = inputNum(0,100);
		} while (korScore < 0);
		
		do
		{
			System.out.print("영어 점수 : ");
			engScore = inputNum(0,100);
		} while (engScore < 0);

		do
		{
			System.out.print("수학 점수 : ");
			mathScore = inputNum(0,100);
		} while (mathScore < 0);
	
		// 입력받은 정보 arraylist에 저장.
		student.add(new StudentInfo(name, korScore, engScore, mathScore));

		System.out.println("등록되었습니다");
		
		determineRanking();	// 학생들의 순위 재설정
		
		saveFile();
		
	} // AddStudent()


	// 번호순으로 전체 학생 정보 출력 (2)
	public void noSortedView () {
		
		// 학생 배열이 비어있으면 메소드 종료
		if(student.isEmpty()) {
			System.out.println("등록된 학생이 없습니다");
			return;
		}

		System.out.printf("번호\t이름\t국어\t영어\t수학\t총점\t평균\t순위%n");
		for(int i = 0 ;i < student.size(); i++) {
			System.out.println(student.get(i).printScore());
		}
	} // noSortedView()	

	// 순위순으로 전체 학생 정보 출력 (3)
	public void rankSortedView() {
		
		// 학생 배열이 비어있으면 메소드 종료
		if(student.isEmpty()) {
			System.out.println("등록된 학생이 없습니다");
			return;
		}

		// 원래 배열을 복제해서 선택정렬한 뒤 복제한 배열 출력
		ArrayList<StudentInfo> rankSortedArray = (ArrayList<StudentInfo>)student.clone();		// 우리가 1부터 쓰기때문에 오류가 남. 0부터 해야됨...
		
		// 순차정렬
		sortArray(rankSortedArray);

		// 출력
		System.out.printf("번호\t이름\t국어\t영어\t수학\t총점\t평균\t순위%n");
		for(int i = 0 ;i < student.size(); i++) {
			System.out.println(rankSortedArray.get(i).printScore());
		}
	} // rankSortedView()




	// 특정 학생의 성적을 출력하는 메소드(이름 or 번호 검색) (4)
	public void personalGradeCheck() { 

		if(student.isEmpty()) {
			System.out.println("등록된 학생이 없습니다");
			return;
		}

		System.out.printf("메뉴를 선택하세요(1. 이름 입력 2. 번호 입력) : ");
		int a = inputNum(1,2);

		switch(a) {
			case 1:
				System.out.print("이름 입력 : ");
				String name =  inputStr();
				viewByName(name);
				break;
			case 2:
				System.out.print("번호 입력 : ");
				int num = inputNum(1, student.size());
				viewByNum(num-1);		// 배열은 0번부터 저장되기 때문에 -1 시켜줌.
				break;
			default:
				break;
		}

	} // personalGradeCheck()

	public void viewByName(String _name) {

		boolean isSeek = false;	// 해당 학생이 있는지 없는지 확인할 변수
		//StudentInfo[] temp = new StudentInfo[StudentInfo.getNumOfStudent()+1];
		ArrayList<StudentInfo> temp = new ArrayList<StudentInfo>();

		for(int i = 0; i < student.size(); i++) {
			if( student.get(i).getName().equals(_name)) {
				temp.add(student.get(i));
				isSeek=true;
			}
		}

		if(!isSeek) {	// 배열에 해당 학생이 없으면
				System.out.println("존재하지 않는 학생입니다.\n");
				return;
		}

		// 출력
		System.out.printf("번호\t이름\t국어\t영어\t수학\t총점\t평균\t순위%n");
		for(int i = 0 ;i < temp.size(); i++) {
			System.out.println(temp.get(i).printScore());
		}
	}

	public void viewByNum(int _num) {

		boolean isSeek = false;	// 해당 학생이 있는지 없는지 확인할 변수
		ArrayList<StudentInfo> temp = new ArrayList<StudentInfo>();

		for(int i = 0; i < student.size(); i++) {
			if( student.get(i).getNo() == _num) {
				temp.add(student.get(i));
				isSeek=true;
			}
		}

		if(!isSeek) {	// 배열에 해당 학생이 없으면
				System.out.println("존재하지 않는 학생입니다.\n");
				return;
		}

		// 출력
		System.out.printf("번호\t이름\t국어\t영어\t수학\t총점\t평균\t순위%n");
		for(int i = 0 ;i < temp.size(); i++) {
			System.out.println(temp.get(i).printScore());
		}
	}
	

}
 

